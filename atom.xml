<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>keep alive</title>
  
  
  <link href="http://keep-a.live/atom.xml" rel="self"/>
  
  <link href="http://keep-a.live/"/>
  <updated>2021-12-24T10:01:27.979Z</updated>
  <id>http://keep-a.live/</id>
  
  <author>
    <name>Li Wenjian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WSL2 use proxy of Windows</title>
    <link href="http://keep-a.live/2021/12/22/WSL2-use-proxy-of-Windows/"/>
    <id>http://keep-a.live/2021/12/22/WSL2-use-proxy-of-Windows/</id>
    <published>2021-12-22T07:54:45.000Z</published>
    <updated>2021-12-24T10:01:27.979Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2021/12/22/WSL使用Windows中的V2rayN/">中文</a>｜<a href="/2021/12/22/WSL2-use-proxy-of-Windows/">English</a></p><p>Install <code>proxychains4</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install proxychains4</span><br></pre></td></tr></table></figure><p>To configure <code>proxychains4</code> in a normal Ubuntu or <strong>WSL1</strong>, you just need to modify <code>/etc/proxychains4.conf</code>.</p><p>Here's how to do it</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><p>Go to the bottom line and change the port according to the format it is written in. Make it match the proxy port you are using.</p><p>But in <strong>WSL2</strong>, the address of the subsystem and the host are not the same, which means you can't use 127.0.0.1 directly anymore.</p><p>You can check the IP address of the host with the following command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/resolv.conf | grep nameserver | awk &#x27;&#123; print $2 &#125;&#x27;</span><br></pre></td></tr></table></figure><p>So just add the following two lines to <code>~/.zshrc</code> or <code>~/.bashrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hostip=$(cat /etc/resolv.conf | grep nameserver | awk &#x27;&#123; print $2 &#125;&#x27;)</span><br><span class="line">sudo sed -i &quot;$ c socks5 $&#123;hostip&#125; 10808&quot; /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><p>⚠️ I use v2rayN so it is <code>10808</code> port, please adjust it according to the proxy you use.</p><p>This automatically changes the last line of <code>/etc/proxychains4.conf</code> each time the command line is opened.</p><p>After that you can go proxy by adding <code>proxychains4</code> in front of the command.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 curl myip.ipip.net</span><br><span class="line">当前 IP：XXX.XXX.XX.XXX  来自于：荷兰 北荷兰省 阿姆斯特丹  it7.net</span><br></pre></td></tr></table></figure><p>By the way <code>proxychains4</code> should be written after <code>sudo</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo proxychains4 apt-get update</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/2021/12/22/WSL使用Windows中的V2rayN/&quot;&gt;中文&lt;/a&gt;｜&lt;a href=&quot;/2021/12/22/WSL2-use-proxy-of-Windows/&quot;&gt;English&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install &lt;code&gt;prox</summary>
      
    
    
    
    
    <category term="WSL2" scheme="http://keep-a.live/tags/WSL2/"/>
    
    <category term="Tutorials" scheme="http://keep-a.live/tags/Tutorials/"/>
    
    <category term="Windows" scheme="http://keep-a.live/tags/Windows/"/>
    
    <category term="proxy" scheme="http://keep-a.live/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>WSL使用Windows中的V2rayN</title>
    <link href="http://keep-a.live/2021/12/22/WSL%E4%BD%BF%E7%94%A8Windows%E4%B8%AD%E7%9A%84V2rayN/"/>
    <id>http://keep-a.live/2021/12/22/WSL%E4%BD%BF%E7%94%A8Windows%E4%B8%AD%E7%9A%84V2rayN/</id>
    <published>2021-12-22T07:54:45.000Z</published>
    <updated>2021-12-24T10:00:28.727Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2021/12/22/WSL使用Windows中的V2rayN/">中文</a>｜<a href="/2021/12/22/WSL2-use-proxy-of-Windows/">English</a></p><p>安装<code>proxychains4</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install proxychains4</span><br></pre></td></tr></table></figure><p>在普通的Ubuntu/<strong>WSL1</strong>中要配置<code>proxychains4</code>只需要修改一下<code>/etc/proxychains4.conf</code>就行。具体做法是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><p>到最下面一行按照它写好的格式修改端口为你所用代理的端口。</p><p>但是在<strong>WSL2</strong>中，子系统和主机的地址并不一样，也就是说不能直接用127.0.0.1了。</p><p>你可以使用以下命令查看主机的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/resolv.conf | grep nameserver | awk &#x27;&#123; print $2 &#125;&#x27;</span><br></pre></td></tr></table></figure><p>所以只需要在<code>~/.zshrc</code>或者<code>～/.bashrc</code>中加上以下两行</p><p>⚠️用的是v2rayN所以是<code>10808</code>端口，请根据你用的代理自行调整一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hostip=$(cat /etc/resolv.conf | grep nameserver | awk &#x27;&#123; print $2 &#125;&#x27;)</span><br><span class="line">sudo sed -i &quot;$ c socks5 $&#123;hostip&#125; 10808&quot; /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><p>在每次开命令行的时候自动更改<code>/etc/proxychains4.conf</code>的最后一行</p><p>之后你就可以通过在命令前添加proxychains4来走代理了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 curl myip.ipip.net</span><br><span class="line">当前 IP：XXX.XXX.XX.XXX  来自于：荷兰 北荷兰省 阿姆斯特丹  it7.net</span><br></pre></td></tr></table></figure><p>另外proxychains4要写在sudo后面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo proxychains4 apt-get update</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/2021/12/22/WSL使用Windows中的V2rayN/&quot;&gt;中文&lt;/a&gt;｜&lt;a href=&quot;/2021/12/22/WSL2-use-proxy-of-Windows/&quot;&gt;English&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;code&gt;proxychain</summary>
      
    
    
    
    
    <category term="WSL2" scheme="http://keep-a.live/tags/WSL2/"/>
    
    <category term="Tutorials" scheme="http://keep-a.live/tags/Tutorials/"/>
    
    <category term="Windows" scheme="http://keep-a.live/tags/Windows/"/>
    
    <category term="proxy" scheme="http://keep-a.live/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Install CUDA in WSL2</title>
    <link href="http://keep-a.live/2021/12/22/Install-CUDA/"/>
    <id>http://keep-a.live/2021/12/22/Install-CUDA/</id>
    <published>2021-12-22T07:11:45.000Z</published>
    <updated>2021-12-22T08:08:58.328Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="系统要求">系统要求</span></h2><ul><li><p>需要 <a href="https://microsoft.com/software-download/windows11">Windows 11</a> or <a href="https://microsoft.com/software-download/windows10">Windows 10, version 21H2</a>。虽然官方说的要求是windows版本在<code>20145</code>及以上，但还是最好去设置里加入<strong>Windows预览体验计划</strong>。在Windows命令行中运行<code>winver</code>可以查看内部版本号</p></li><li><p>WSL内核版本在4.19.121及以上，在wsl命令行中运行<code>uname -r</code>查看版本，如果版本过低在Windows命令行中运行 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --update</span><br></pre></td></tr></table></figure></p></li><li><p>一张GeForce/Quadro显卡</p></li></ul><h2><span id="在pc上安装cuda驱动程序">在PC上安装CUDA驱动程序</span></h2><p>🌟下载并安装 <a href="https://developer.nvidia.com/cuda/wsl">NVIDIA CUDA-enabled driver for WSL</a>。</p><h2><span id="安装ubuntu">安装Ubuntu</span></h2><p>在Windows的应用商店里安装Ubuntu，这个绝大多数教程都有，去找个别的教程看看就行</p><h2><span id="安装cuda">安装CUDA</span></h2><p>我写了一个脚本，你可以直接它来安装CUDA</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://keep-a.live/wsl_install_cuda.sh</span><br><span class="line">source ./wsl_install_cuda.sh</span><br></pre></td></tr></table></figure><p>这个过程会比较慢，尤其是下载<code>cuda-toolkit</code>的时候，如果你想用代理的话可以试试proxychains4，详见这篇<a href="/2021/12/22/WSL2-use-proxy-of-Windows/">blog</a>。</p><p>当然你也可以自己按照脚本中的内容手动安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wsl_install_cuda.sh</span></span><br><span class="line"><span class="comment"># DISTRO变量是NVIDIA CUDA资源库名称的一部分，被设置为你所使用的发行版名称；</span></span><br><span class="line"><span class="comment"># 我们将使用 &quot;wsl-ubuntu &quot;来表示WSL上的CUDA。 APT_INSTALL变量指定了要安装的软件包的名称；</span></span><br><span class="line"><span class="comment"># 你可以从wsl-ubuntu资源库中安装cuda软件包来获得最新版本的CUDA工具包。</span></span><br><span class="line"><span class="built_in">export</span> DISTRO=wsl-ubuntu</span><br><span class="line"><span class="built_in">export</span> APT_INSTALL=cuda</span><br><span class="line"><span class="comment"># export DISTRO=ubuntu2004</span></span><br><span class="line"><span class="comment"># export APT_INSTALL=cuda-toolkit-11-4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在apt-key中添加CUDA</span></span><br><span class="line">sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/<span class="variable">$&#123;DISTRO&#125;</span>/x86_64/7fa2af80.pub</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://developer.download.nvidia.com/compute/cuda/repos/<span class="variable">$&#123;DISTRO&#125;</span>/x86_64 /&quot;</span> | sudo tee /etc/apt/sources.list.d/cuda.list</span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/<span class="variable">$&#123;DISTRO&#125;</span>/x86_64/cuda-<span class="variable">$&#123;DISTRO&#125;</span>.pin</span><br><span class="line">sudo mv cuda-<span class="variable">$&#123;DISTRO&#125;</span>.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装CUDA Toolkit</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt -y upgrade</span><br><span class="line">sudo apt install -y <span class="variable">$&#123;APT_INSTALL&#125;</span></span><br><span class="line"><span class="comment"># sudo proxychains4 apt update &amp;&amp; sudo apt -y upgrade</span></span><br><span class="line"><span class="comment"># sudo proxychains4 apt install -y $&#123;APT_INSTALL&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">cat &lt;&lt; <span class="string">&#x27;EOS&#x27;</span> &gt;&gt; ~/.profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#Ref: https://astherier.com/blog/2021/07/windows11-cuda-on-wsl2-setup/</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-11.4/bin<span class="variable">$&#123;PATH:+:<span class="variable">$&#123;PATH&#125;</span>&#125;</span></span><br><span class="line"></span><br><span class="line">EOS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装第三方库（可选）</span></span><br><span class="line">sudo apt install -y g++ freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libglu1-mesa libglu1-mesa-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># build建立一些样本程序来检查CUDA工具包的运行情况</span></span><br><span class="line"><span class="comment"># 存放在/usr/local/cuda/samples/下</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/samples/1_Utilities/deviceQuery/</span><br><span class="line">sudo make</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/samples/1_Utilities/bandwidthTest/</span><br><span class="line">sudo make</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/samples/7_CUDALibraries/simpleCUBLAS/</span><br><span class="line">sudo make</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/samples/7_CUDALibraries/simpleCUFFT/</span><br><span class="line">sudo make</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda/samples/bin/x86_64/linux/release/</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你已经完成了在WSL上配置CUDA的工作。</span></span><br><span class="line"><span class="string">请检查它们是否正常工作，例如：</span></span><br><span class="line"><span class="string">$ cd /usr/local/cuda/samples/bin/x86_64/linux/release/</span></span><br><span class="line"><span class="string">$ ./deviceQuery</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><h2><span id="验证安装">验证安装</span></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/cuda/samples/bin/x86_64/linux/release/</span><br></pre></td></tr></table></figure><p>然后运行，结果如下说明已经正常安装好了CUDA</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./deviceQuery</span></span><br><span class="line">./deviceQuery Starting...</span><br><span class="line"></span><br><span class="line"> CUDA Device Query (Runtime API) version (CUDART static linking)</span><br><span class="line"></span><br><span class="line">Detected 1 CUDA Capable device(s)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;系统要求&quot;&gt;系统要求&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;需要 &lt;a href=&quot;https://microsoft.com/software-download/windows11&quot;&gt;Windows 11&lt;/a&gt; or &lt;a href=&quot;h</summary>
      
    
    
    
    
    <category term="WSL2" scheme="http://keep-a.live/tags/WSL2/"/>
    
    <category term="CUDA" scheme="http://keep-a.live/tags/CUDA/"/>
    
    <category term="Tutorials" scheme="http://keep-a.live/tags/Tutorials/"/>
    
    <category term="Windows" scheme="http://keep-a.live/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Progress Report 7</title>
    <link href="http://keep-a.live/2021/12/19/Progress-Report-7/"/>
    <id>http://keep-a.live/2021/12/19/Progress-Report-7/</id>
    <published>2021-12-19T08:55:42.000Z</published>
    <updated>2021-12-19T10:36:56.106Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="进展">进展</span></h2><blockquote><p>第十五周主要完成了对《视觉SLAM十四讲》中第九讲——后端1的学习。内容包括以EKF为代表的滤波器后端和非线性优化后端。</p></blockquote><p>这一章的理论非常多，并且书上讲的并不透彻。所以又去看了很多相关的资料，比如说<a href="https://www.youtube.com/channel/UCi1TC2fLRvgBQNe-T4dp8Eg">Cyrill Stachniss</a>发布的课程<a href="https://www.youtube.com/watch?v=LhWUwzYcZuw&amp;t=1221s">Photogrammetry II - 07c - Bundle Adjustment - Part 2 (2015/16) - YouTube</a>, <a href="https://www.youtube.com/watch?v=Tz3pg3d1TIo">SLAM Course - 12 - FastSLAM (2013/14; Cyrill Stachniss) - YouTube</a>等等。</p><h3><span id="后端概述">后端概述</span></h3><p>我的理解是，<strong>前端只利用两帧图像进行定位与建图，而后端利用多张图像进行定位与建图。</strong>这样做的好处有：</p><ul><li><strong>更完整的地图</strong>：比如说我们要建图的对象很复杂，仅仅使用两个图像可能依然会有一些遮挡的情况。必须从更对的位置对它进行观察才能获得其完整的样貌。</li><li><strong>更完整的路径</strong>：显然，如果想知道相机每一帧的位姿，也就是完整的路径，对每一帧都要进行估计。</li><li><strong>更高精度</strong>：单纯的使用前端会产生<strong>累计误差</strong>，意思是每使用一次视觉里程计，它都会有一定的不确定性，而一味的往前走这个不确定性就会累计。如果对每一步的估计都向右偏了1°，累积起来后果依然会很大。但是其实后面的观测对前面的观测依然有降低其不确定性的作用。所以说，考虑全局最优就是在消除累计误差。</li></ul><h3><span id="滤波器后端">滤波器后端</span></h3><p>滤波器是过去SLAM后端的主流方法（尤其是LiDAR里）。这种方法主要是从概率论的角度来看状态估计，在SLAM里要估计的状态就是相机的位姿<span class="math inline">\(\boldsymbol x_1\)</span>到<span class="math inline">\(\boldsymbol x_N\)</span>和路标的位置<span class="math inline">\(\boldsymbol y_1\)</span>到<span class="math inline">\(\boldsymbol y_M\)</span>了。</p><p>SLAM过程可以由运动方程和观测方程描述： <span class="math display">\[\begin{array}{c}\boldsymbol x_k = f(\boldsymbol x_{k-1}, \boldsymbol u_k)+\boldsymbol w_k \\\boldsymbol z_k = h(\boldsymbol y_j, \boldsymbol x_k)+\boldsymbol v_{k,j}\end{array}\ \ \ \ \ \ \ k = 1,...,N,j=1,...,M\]</span> 由于误差项的存在，这里的位姿和路标位置并不是确定的量，而是一些<strong>随机变量</strong>。</p><blockquote><p>举个例子，假如说运动方程中的<span class="math inline">\(\boldsymbol u_k\)</span>是向正北走了1m，也就是机器人执行了向正北走1m的指令。但可能由于路面并不平，或者左边的轮子比右边的轮子大几毫米，或者就是单纯的多/少走了2cm，等等因素，真正的运动并不是真的向正北走1m。</p></blockquote><p>在这样的想法下，SLAM问题就变成了<strong>“什么样的位姿和路标状态最有可能产生现在的观测？”</strong>的问题，也就是一种<strong>极大似然估计</strong>。</p><p>记<span class="math inline">\(k\)</span>时刻所有待估计的未知量为<span class="math inline">\(\boldsymbol x_k\stackrel{\mathrm{def}}{=}\{\boldsymbol x_k,\boldsymbol y_1,...,\boldsymbol y_M\}\)</span>，运动和观测方程就变成了 <span class="math display">\[\left\{\begin{array}{c}\boldsymbol x_k = f(\boldsymbol x_{k-1}, \boldsymbol u_k)+\boldsymbol w_k \\\boldsymbol z_k = h( \boldsymbol x_k)+\boldsymbol v_{k,j}\end{array}\ \ \ \ \ \ \ k = 1,...,N\right.\]</span> 以下为贝叶斯滤波器的推导，我觉得书上并没有讲清楚，就补充在这里了</p><blockquote><p>我们希望通过<span class="math inline">\(0\)</span>到<span class="math inline">\(k\)</span>时刻得到的数据（运动的指令<span class="math inline">\(\boldsymbol u_{1:k}\)</span>以及观测<span class="math inline">\(\boldsymbol z_{1:k}\)</span>）求解<span class="math inline">\(\boldsymbol x_k\)</span>的分布情况，在滤波器里也就是要找到下面式子的<strong>递推公式</strong>（可能是因为SLAM强调时序性） <span class="math display">\[P(\boldsymbol x_k|\boldsymbol x_0, \boldsymbol u_{1:k}, \boldsymbol z_{1:k})\]</span> 按照贝叶斯公式，交换<span class="math inline">\(\boldsymbol z_{k}\)</span>和<span class="math inline">\(\boldsymbol x_{k}\)</span>可以得到 <span class="math display">\[P(\boldsymbol x_k|\boldsymbol x_0, \boldsymbol u_{1:k}, \boldsymbol z_{1:k})= \eta \underline {P(\boldsymbol z_{k}|\boldsymbol x_{k}, \boldsymbol u_{1:k}, \boldsymbol z_{1:k-1})}P(\boldsymbol x_k|\boldsymbol x_0, \boldsymbol u_{1:k}, \boldsymbol z_{1:k-1})\]</span> 其中<span class="math inline">\(\eta\)</span>为归一化因子。第二项是观测<span class="math inline">\(\boldsymbol z_{k}\)</span>的分布，这显然只与当前的位姿和路标有关，和之前的观测/运动都无关，所以也可以写成 <span class="math display">\[P(\boldsymbol x_k|\boldsymbol x_0, \boldsymbol u_{1:k}, \boldsymbol z_{1:k})= \eta P(\boldsymbol z_{k}|\boldsymbol x_{k})\underline {P(\boldsymbol x_k|\boldsymbol x_0, \boldsymbol u_{1:k}, \boldsymbol z_{1:k-1})}\]</span> 按照全概率公式以<span class="math inline">\(\boldsymbol x_{k-1}\)</span>为条件展开可得 <span class="math display">\[P(\boldsymbol x_k|\boldsymbol x_0, \boldsymbol u_{1:k}, \boldsymbol z_{1:k-1})=\int_{\boldsymbol x_{k-1}}\underline{P(\boldsymbol x_k|\boldsymbol x_{k-1},\boldsymbol x_0, \boldsymbol u_{1:k}, \boldsymbol z_{1:k-1})}P(\boldsymbol x_{k-1}|\boldsymbol x_0, \boldsymbol u_{1:k}, \boldsymbol z_{1:k-1})dx_{k-1}\]</span> 假设马尔可夫性，<span class="math inline">\(\boldsymbol x_k\)</span>只与<span class="math inline">\(k-1\)</span>有关，与<span class="math inline">\(k-1\)</span>之前都无关，就有 <span class="math display">\[P(\boldsymbol x_k|\boldsymbol x_0, \boldsymbol u_{1:k}, \boldsymbol z_{1:k})= \eta P(\boldsymbol z_{k}|\boldsymbol x_{k})\int _{\boldsymbol x_{k-1}}P(\boldsymbol x_k|\boldsymbol x_{k-1}, \boldsymbol u_{k})P(\boldsymbol x_{k-1}|\boldsymbol x_0, \underline{\boldsymbol u_{1:k}}, \boldsymbol z_{1:k-1})dx_{k-1}\]</span> 再假设<span class="math inline">\(\boldsymbol x_{k-1}\)</span>与<span class="math inline">\(\boldsymbol u_k\)</span>无关，就有</p><p>但其实也不一定无关，假如，世界只有前后间隔1m的两个可能的位置，<span class="math inline">\(k\)</span>时刻的运动是<strong>向前1m</strong>，那么<span class="math inline">\(k-1\)</span>的位置只可能是在<strong>后面</strong>而不是前面</p><p><span class="math display">\[  P(\boldsymbol x_k|\boldsymbol x_0, \boldsymbol u_{1:k}, \boldsymbol z_{1:k})= \eta P(\boldsymbol z_{k}|\boldsymbol x_{k})\int _{\boldsymbol x_{k-1}}P(\boldsymbol x_k|\boldsymbol x_{k-1}, \boldsymbol u_{k})\underline{P(\boldsymbol x_{k-1}|\boldsymbol x_0, \boldsymbol u_{1:k-1}, \boldsymbol z_{1:k-1})}dx_{k-1}  \]</span> 而这里<span class="math inline">\(P(\boldsymbol x_{k-1}|\boldsymbol x_0, \boldsymbol u_{1:k-1}, \boldsymbol z_{1:k-1})\)</span>就是<span class="math inline">\(k-1\)</span>时刻的分布。这样我们就有了求解<span class="math inline">\(\boldsymbol x_k\)</span>的分布情况的递归方法，以上也被称为<strong>贝叶斯滤波器</strong>。</p></blockquote><p>但实际上贝叶斯滤波器只是一个框架，并没有给出这个求积分的方法。具体的方法可以分为<strong>卡尔曼滤波器</strong>和<strong>粒子滤波器</strong>两大类。</p><ul><li>运动和观测方程均线性，噪声满足高斯分布→<strong>卡尔曼滤波器</strong></li><li>运动和观测方程非线性，但在某个点附近泰勒展开，噪声满足高斯分布→<strong>扩展卡尔曼滤波器</strong></li><li>噪声不满足高斯分布，用粒子模拟分布情况→<strong>粒子滤波器</strong></li></ul><p>但是在滤波器中，由于做了马尔可夫性的假设，依然没有考虑当前状态和很久以前状态的关系。并且还有EKF的线性化只能在很小的范围内成立，协方差矩阵会很大，没有异常检测机制等问题。尤其是在视觉SLAM中特征点很多且很容易存在误差。现在通常认为在同等计算量的条件下，非线性优化能取得更好的结果。</p><h3><span id="非线性优化后端">非线性优化后端</span></h3><p>使用图优化求解BA。BA即Bundle Adjustment，意思是调整（adjustment）相机位姿和空间点的位置，使得从特征点发出的几束光线（bundles of light rays）对准相机的光心。这一张中讨论的BA很类似于SfM问题，也就是并没有考虑图像的时序性和计算的实时性。这一部分内容将在下一章滑动窗口优化中讲解。</p><h4><span id="投影模型">投影模型</span></h4><p>投影模型如下 <span class="math display">\[\boldsymbol y=p=\begin{bmatrix}X\\Y\\Z\end{bmatrix}\xrightarrow[\text{相机坐标系}]{P&#39;=Rp+t}\begin{bmatrix}X&#39;\\Y&#39;\\Z&#39;\end{bmatrix}\xrightarrow[\text{归一化坐标}]{}\begin{bmatrix}X&#39;/Z&#39;\\Y&#39;/Z&#39;\\1\end{bmatrix}=\begin{bmatrix}u_c\\v_c\\1\end{bmatrix}\\\]</span> <span class="math display">\[\xrightarrow[\text{畸变模型}]{k_1,k_2}\begin{bmatrix}u_c(1+k_1r_c^2+k_2r_c^4)\\v_c(1+k_1r_c^2+k_2r_c^4)\end{bmatrix}=\begin{bmatrix}u_c&#39;\\v_c&#39;\end{bmatrix}\xrightarrow[\text{相机模型}]{f_x, f_y, c_x, c_y}\begin{bmatrix}f_xu_c&#39;+c_x\\f_yv_c&#39;+c_y\end{bmatrix}=\begin{bmatrix}u_s\\v_s\end{bmatrix}=\boldsymbol z\]</span> 这个过程也就是之前讲的<strong>观测方程</strong> <span class="math display">\[\boldsymbol z=h(\boldsymbol x, \boldsymbol y)\]</span> 这里的<span class="math inline">\(\boldsymbol x\)</span>就是相机的位姿，具体可以表示为李群<span class="math inline">\(\boldsymbol T\)</span>或者李代数<span class="math inline">\(\boldsymbol \xi\)</span>。那么，相机<span class="math inline">\(\boldsymbol \xi_i\)</span>观测到特征点<span class="math inline">\(\boldsymbol p_j\)</span>的误差<span class="math inline">\(\boldsymbol e_{ij}\)</span>就可以表示为 <span class="math display">\[\boldsymbol e_{ij}=\boldsymbol z_{ij}-h(\boldsymbol \xi_i, \boldsymbol p_j)\]</span> <strong>注意这里的<span class="math inline">\(\boldsymbol e_{ij}\)</span>并不是一个数值，而是二维向量</strong></p><p>整体的代价函数为 <span class="math display">\[\frac 1 2 \sum_{i=1}^m\sum_{j=1}^n \boldsymbol ||\boldsymbol e_{ij}||^2\]</span></p><blockquote><p>这个代价函数，看起来是个数值。但看了后面的我感觉把要优化的目标函数<strong>想成</strong>一个<span class="math inline">\(2m×n\)</span>的矩阵比较合理。也就是类似这个样子 <span class="math display">\[\begin{bmatrix}e_{11_1} &amp;&amp; e_{12_1} &amp;&amp; ...\\e_{11_2} &amp;&amp; e_{12_2} &amp;&amp; ...\\e_{21_1} &amp;&amp; e_{22_1} &amp;&amp; ...\\e_{21_2} &amp;&amp; e_{22_2} &amp;&amp; ...\\... &amp;&amp; ... &amp;&amp; ...\end{bmatrix}\]</span> 或者这样的分块矩阵</p><p><span class="math display">\[\begin{bmatrix}\boldsymbol e_{11} &amp;&amp; \boldsymbol e_{12} &amp;&amp; ...\\\boldsymbol e_{21} &amp;&amp; \boldsymbol e_{22} &amp;&amp; ...\\... &amp;&amp; ... &amp;&amp; ...\end{bmatrix}\]</span> 但是后面好像还会重新排列一下，<strong>写出来</strong>可能更像是这样 <span class="math display">\[\begin{bmatrix}\boldsymbol e_{11}&amp;\boldsymbol e_{12}&amp;...&amp;\boldsymbol e_{21}&amp;\boldsymbol e_{22}&amp;...\end{bmatrix}^T\]</span> 总而言之，这里的矩阵到底是几乘几的好像并不重要，理解清楚<span class="math inline">\(\boldsymbol e_{ij}\)</span>就行</p></blockquote><h4><span id="ba的求解">BA的求解</span></h4><p>求解BA的过程其实是不断通过<span class="math inline">\(\boldsymbol H\Delta\boldsymbol x=\boldsymbol g\)</span>（高斯牛顿法）求解<span class="math inline">\(\Delta\boldsymbol x\)</span>。而在后端中，这里的<span class="math inline">\(\boldsymbol x\)</span>包含了所有的相机位姿和路标点位置 <span class="math display">\[\boldsymbol x=[\boldsymbol \xi_1,...,\boldsymbol \xi_m,\boldsymbol p_1,...,\boldsymbol p_n]^T\\\boldsymbol x=[\boldsymbol x_c, \boldsymbol x_p]^T\]</span> 而雅可比矩阵也相应的分块为 <span class="math display">\[\boldsymbol J=\begin{bmatrix}\boldsymbol F\ \ \boldsymbol E\end{bmatrix}\]</span> 对应的<span class="math inline">\(\boldsymbol H\)</span>矩阵为 <span class="math display">\[\boldsymbol H = \boldsymbol J^T\boldsymbol J=\begin{bmatrix}\boldsymbol F^T\boldsymbol F &amp; \boldsymbol F^T\boldsymbol E\\\boldsymbol E^T\boldsymbol F &amp; \boldsymbol E^T\boldsymbol E\end{bmatrix}\]</span> 要求解<span class="math inline">\(\boldsymbol H\Delta\boldsymbol x=\boldsymbol g\)</span>就要对<span class="math inline">\(\boldsymbol H\)</span>求逆，矩阵求逆是一个<span class="math inline">\(O(n^3)\)</span>复杂的的操作。对于<strong>特征点数量上百个</strong>的视觉SLAM，这种方法之所以可行是因为<span class="math inline">\(\boldsymbol H\)</span>的特殊结构，而这种特殊结构正与图优化的图模型对应。</p><h4><span id="稀疏性和边缘化">稀疏性和边缘化</span></h4><p><span class="math inline">\(\boldsymbol H\)</span>的特殊结构就在于它并不是一个稠密的矩阵，尤其是在特征点对应的雅可比分块中。</p><blockquote><p>其实在滤波器（例如FastSLAM）中也会利用这一点，由于空间点（作为随机变量）的分布与其他特征点的位置是无关的，所以在估计的时候并不会使用很大的EKF，而是对每个空间点单独使用一个EKF进行估计。</p></blockquote><p>考虑代价函数的其中一个<span class="math inline">\(\boldsymbol e_{ij}\)</span> <span class="math display">\[\boldsymbol J_{ij}(x)=(\boldsymbol 0_{2×6},...,\boldsymbol 0_{2×6},\frac {\boldsymbol e_{ij}} {\boldsymbol \xi_{i}},\boldsymbol 0_{2×6},...\boldsymbol 0_{2×3},...,\boldsymbol 0_{2×3},\frac {\boldsymbol e_{ij}} {\boldsymbol p_{j}},\boldsymbol 0_{2×3},...,\boldsymbol 0_{2×3})\]</span> 显然相机在<span class="math inline">\(\boldsymbol \xi_{i}\)</span>观测<span class="math inline">\(\boldsymbol p_{j}\)</span>产生的误差只与<span class="math inline">\(\boldsymbol \xi_{i}\)</span>和<span class="math inline">\(\boldsymbol p_{j}\)</span>有关，所以雅可比矩阵有很强的稀疏性。从而导致<span class="math inline">\(\boldsymbol H\)</span>也有很强的稀疏性</p><figure><img src="https://s2.loli.net/2021/12/19/yWLJ2tKg1m4qVnG.png" alt="图1"><figcaption aria-hidden="true">图1</figcaption></figure><p>最终的<span class="math inline">\(\boldsymbol H\)</span>的非零区域如下图左侧所示</p><figure><img src="https://s2.loli.net/2021/12/19/ghLIYDanKlBc48C.png" alt="图2"><figcaption aria-hidden="true">图2</figcaption></figure><p>与非零块与图模型中的边一一对应。</p><p>有了这种性质就可以将线性方程组<span class="math inline">\(\boldsymbol H\Delta\boldsymbol x=\boldsymbol g\)</span>分块进行求解（详见书）</p><h4><span id="鲁棒核函数">鲁棒核函数</span></h4><p>相比于滤波器的没有异常检测机制问题，非线性优化可以将误差项中的二范数换成鲁棒的核函数。</p><h2><span id="问题">问题</span></h2><p>没什么问题，只是这章东西太多了很多地方理解的还不够深入。</p><h2><span id="计划">计划</span></h2><p>跑一下后端BA的代码。</p><p>学习《视觉SLAM十四讲》第十章。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;进展&quot;&gt;进展&lt;/span&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;第十五周主要完成了对《视觉SLAM十四讲》中第九讲——后端1的学习。内容包括以EKF为代表的滤波器后端和非线性优化后端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一章的理论非常多</summary>
      
    
    
    
    
    <category term="Notes" scheme="http://keep-a.live/tags/Notes/"/>
    
    <category term="SLAM" scheme="http://keep-a.live/tags/SLAM/"/>
    
    <category term="视觉SLAM十四讲" scheme="http://keep-a.live/tags/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/"/>
    
    <category term="graduation project" scheme="http://keep-a.live/tags/graduation-project/"/>
    
  </entry>
  
  <entry>
    <title>A bug in FIFA 22</title>
    <link href="http://keep-a.live/2021/12/18/A-bug-in-FIFA-22/"/>
    <id>http://keep-a.live/2021/12/18/A-bug-in-FIFA-22/</id>
    <published>2021-12-18T14:43:24.000Z</published>
    <updated>2021-12-18T14:45:46.725Z</updated>
    
    <content type="html"><![CDATA[<p>Ter Stegen has superpowers!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Ter Stegen has superpowers!&lt;/p&gt;
</summary>
      
    
    
    
    <category term="gallery" scheme="http://keep-a.live/categories/gallery/"/>
    
    
    <category term="football" scheme="http://keep-a.live/tags/football/"/>
    
    <category term="FIFA22" scheme="http://keep-a.live/tags/FIFA22/"/>
    
    <category term="video games" scheme="http://keep-a.live/tags/video-games/"/>
    
  </entry>
  
  <entry>
    <title>Progress Report 6</title>
    <link href="http://keep-a.live/2021/12/12/Progress-Report-6/"/>
    <id>http://keep-a.live/2021/12/12/Progress-Report-6/</id>
    <published>2021-12-12T06:51:51.000Z</published>
    <updated>2021-12-13T03:25:02.933Z</updated>
    
    <content type="html"><![CDATA[<p><em>公式渲染的可能会比较慢</em></p><blockquote><p>在我的博客中你将会看到三种正经的东西：<a href="/tags/Tutorials">Tutorials</a>、<a href="/tags/Notes">Notes</a>和<a href="/tags/Projects">Projects</a></p><p><a href="/tags/Tutorials">Tutorials</a>会写的比较详细。一般是我在写代码中产生的，用于记录一些我会的东西，也可以当作<strong>教学</strong>来看</p><p><a href="/tags/Notes">Notes</a>是一些学习中的笔记，更多的记录一些我<strong>自己的理解</strong>，希望大家在评论区指正和讨论</p><p><a href="/tags/Projects">Projects</a>将会<strong>分享一些我做的东西</strong></p></blockquote><h1><span id="毕业实训进度报告6">毕业实训进度报告6</span></h1><h2><span id="进展">进展</span></h2><blockquote><p>第十四周主要完成了对《视觉SLAM十四讲》中第八讲——视觉里程计2的学习。内容主要包括视觉里程计中的<strong>光流法</strong>和<strong>直接法</strong>。</p></blockquote><p>关键点法的主要问题：</p><ul><li>计算特征点的时间长</li><li>忽略了除特征点以外的信息</li><li>在没有明显纹理信息时（如面对一面白墙）效果差</li></ul><h3><span id="光流法">光流法</span></h3><p>计算特征点（仅第一帧）→使用光流追踪特征点→对极几何/PnP/ICP</p><h4><span id="lucas-kanada光流稀疏光流的代表">Lucas-Kanada光流（稀疏光流的代表）</span></h4><p>将图像看成时间的函数： <span class="math inline">\(\boldsymbol{I}(t)\)</span> ， <span class="math inline">\(t\)</span> 时刻，位于 <span class="math inline">\((x,y)\)</span> 点的灰度表示为 <span class="math display">\[\boldsymbol{I}(x,y,t)\]</span> <strong>灰度不变假设：</strong> 同一空间点的灰度值，在各个图像中是固定不变的。 <span class="math display">\[\boldsymbol{I}(x+\mathrm{d} x,y+\mathrm{d}y,t+\mathrm{d}t)=\boldsymbol{I}(x,y,t)\]</span></p><p>泰勒展开 <span class="math display">\[\boldsymbol{I}(x+\mathrm{d} x,y+\mathrm{d}y,t+\mathrm{d}t)\approx \boldsymbol{I}(x,y,t) + \frac{\partial\boldsymbol{I}} {\partial x}\mathrm{d}x+ \frac{\partial\boldsymbol{I}} {\partial y}\mathrm{d}y+ \frac{\partial\boldsymbol{I}} {\partial t}\mathrm{d}t\]</span> 化简得 <span class="math display">\[\frac{\partial\boldsymbol{I}} {\partial x}\frac{\mathrm{d}x} {\mathrm{d}t}+ \frac{\partial\boldsymbol{I}} {\partial y}\frac{\mathrm{d}y} {\mathrm{d}t}=-\frac{\partial\boldsymbol{I}} {\partial t}\]</span> 💡<strong>这里我的理解是</strong>：灰度的变化是由图像本身的梯度 <span class="math inline">\(\frac{\partial\boldsymbol{I}} {\partial x}\)</span> 和像素的运动 <span class="math inline">\(\frac{\mathrm{d}x} {\mathrm{d}t}\)</span> 线性组合而成的。于是已知灰度的变化和图像的梯度就可以推出像素的运动，从而达到追踪特征点的目的。</p><p>但是像素的运动（在相机的成像中）是二维的，没法只通过一个方程解出来。于是LK光流假设：某一个窗口（特征点周围的一个小范围）内的像素具有相同的运动，这样就有了更多的约束，形成了一个超定方程，用最小二乘求解。</p><p>实际上是要找到<span class="math inline">\(\mathrm{d}x,\mathrm{d}y\)</span>使得<span class="math inline">\(\boldsymbol{I}\)</span>的变化最小，而优化过程中的Jacobian就是图像在目标点处的梯度</p><p><strong>多层光流：</strong>所拍摄的图像不那么连续的时候，<strong>泰勒展开</strong>就会失效，导致光流追踪的效果很差。所以使用图像金字塔进行多层光流，<strong>由粗至精</strong>的进行求解，具体来说就是使用<strong>上一层计算所得的运动</strong>对下一层的计算进行<strong>初始化</strong>。</p><h3><span id="直接法">直接法</span></h3><p>同样也假设<strong>灰度不变</strong>，与光流法的区别在于<strong>同时追踪特征点和计算相机的运动</strong>，以确保全局最优。或者说，<strong>直接通过灰度的变化推出相机的运动</strong>。（💡但这一方法需要<strong>深度信息</strong>，这可以通过RGB-D相机直接得到，对单目相机只能通过三角测量得出，这就意味着只能用在初始化完成之后。或者同时把深度也作为优化目标，这就更加复杂了。）</p><p>灰度变化的产生原因：<strong>相机运动 <span class="math inline">\(\boldsymbol T\)</span>， 导致空间点 <span class="math inline">\(P\)</span> 在像素坐标系中运动 <span class="math inline">\(p_1→p_2\)</span> 。 </strong>而估计的运动<span class="math inline">\(\boldsymbol T\)</span>使得空间点<span class="math inline">\(P\)</span>在像素坐标中运动<span class="math inline">\(p_1→p_2&#39;\)</span>，导致真实的<span class="math inline">\(p_2\)</span>与估计的<span class="math inline">\(p_2&#39;\)</span>灰度<span class="math inline">\(e\)</span>不同，按照这个思路就可以求出<span class="math inline">\(\frac{\partial e} {\partial \boldsymbol{T}}\)</span>（推导详见书上） <span class="math display">\[\frac{\partial e} {\partial \boldsymbol{T}} = \frac{\partial \boldsymbol{I}_2} {\partial \boldsymbol{u}} \frac{\partial \boldsymbol{u}} {\partial \boldsymbol{q}}\frac{\partial \boldsymbol{q}} {\partial \delta\boldsymbol{\xi}}\delta\boldsymbol{\xi}\]</span> 其中<span class="math inline">\(\frac{\partial \boldsymbol{I}_2} {\partial \boldsymbol{u}}\)</span>为<span class="math inline">\(\boldsymbol{u}\)</span>处图像梯度，<span class="math inline">\(\frac{\partial \boldsymbol{u}} {\partial \boldsymbol{q}}\)</span>为二维点（像素坐标）对三维点（相机坐标）的导数，<span class="math inline">\(\frac{\partial \boldsymbol{q}} {\partial \delta\boldsymbol{\xi}}\)</span>为三维点对运动的导数，<span class="math inline">\(\delta\boldsymbol{\xi}\)</span>为运动的左扰动。反过来说就是，运动引起空间点在相机坐标系运动，引起空间点在像素坐标运动，再结合图像本身的梯度。这三者导致了灰度的变化。</p><p>接下来只需要初始化一个相机运动再进行进行非线性优化就行了。</p><p>举一个例子：假设初始化的运动是<em>原地不动</em>，但是空间点P对应的像素却变亮了。于是就需要模拟出一个运动，使得<strong>更亮的点</strong>对上空间点P。</p><p>这样一想就可以很容易的理解书上直接法的缺点了。</p><h2><span id="问题">问题</span></h2><p>对自动曝光的相机可否先<strong>利用相机的曝光参数对图像进行预处理</strong>，再做以上两种方法，使其更好的满足灰度不变假设呢？</p><h2><span id="计划">计划</span></h2><ol type="1"><li>学习《视觉SLAM十四讲》第九章</li><li>继续阅读ORBSLAM代码（&amp;论文，如果有时间）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;公式渲染的可能会比较慢&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在我的博客中你将会看到三种正经的东西：&lt;a href=&quot;/tags/Tutorials&quot;&gt;Tutorials&lt;/a&gt;、&lt;a href=&quot;/tags/Notes&quot;&gt;Notes&lt;/a&gt;和&lt;a hr</summary>
      
    
    
    
    
    <category term="Notes" scheme="http://keep-a.live/tags/Notes/"/>
    
    <category term="SLAM" scheme="http://keep-a.live/tags/SLAM/"/>
    
    <category term="视觉SLAM十四讲" scheme="http://keep-a.live/tags/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/"/>
    
    <category term="graduation project" scheme="http://keep-a.live/tags/graduation-project/"/>
    
  </entry>
  
  <entry>
    <title>ZYZ at work</title>
    <link href="http://keep-a.live/2021/12/10/ZYZ%20at%20work/"/>
    <id>http://keep-a.live/2021/12/10/ZYZ%20at%20work/</id>
    <published>2021-12-10T08:25:59.000Z</published>
    <updated>2021-12-10T12:47:21.578Z</updated>
    
    <content type="html"><![CDATA[<p>This photo captures an angry woman😠.</p><h2><span id="information">📷Information</span></h2><table><thead><tr class="header"><th style="text-align: center;">参数</th><th style="text-align: center;">数值</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">光圈系数</td><td style="text-align: center;">1.8</td></tr><tr class="even"><td style="text-align: center;">焦距</td><td style="text-align: center;">50</td></tr><tr class="odd"><td style="text-align: center;">照相感光度(ISO)</td><td style="text-align: center;">320</td></tr><tr class="even"><td style="text-align: center;">镜头型号</td><td style="text-align: center;">LUMIX S 50/F1.8</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This photo captures an angry woman😠.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;information&quot;&gt;📷Information&lt;/span&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th st</summary>
      
    
    
    
    <category term="gallery" scheme="http://keep-a.live/categories/gallery/"/>
    
    
    <category term="zyz" scheme="http://keep-a.live/tags/zyz/"/>
    
    <category term="life" scheme="http://keep-a.live/tags/life/"/>
    
    <category term="photography" scheme="http://keep-a.live/tags/photography/"/>
    
  </entry>
  
  <entry>
    <title>Interesting things in this website</title>
    <link href="http://keep-a.live/2021/12/09/Interesting-things/"/>
    <id>http://keep-a.live/2021/12/09/Interesting-things/</id>
    <published>2021-12-09T12:43:55.000Z</published>
    <updated>2021-12-10T13:26:59.932Z</updated>
    
    <content type="html"><![CDATA[<p>这两天刚刚搭起来这个博客，分享一些在写网站过程中有趣的地方。</p><h2><span id="域名">🔗域名</span></h2><p>域名是我在<a href="https://sg.godaddy.com">Godaddy</a>上买的，服务器甚至都没买，就是借住在<a href="https://github.com/Li-Jesse-Jiaze/Li-Jesse-Jiaze.github.io">Github</a>上。主要是因为买国内的服务器还要备案什么的。</p><p>这样总共15块钱一年还算挺便宜的。关于为什么叫域名<code>keep-a.live</code>可以去看<a href="/about/">About</a>或者<a href="/">首页</a>。</p><h2><span id="️javascript">☕️JavaScript</span></h2><p>今天（2021年12月9日）可以说是我自己写<code>JavaScript</code>的第三天，这还是算上之前帮别人debug的日子。可以说是纯纯的新手。对于新手而言，我觉得网页好不好看，主要是看有没有找到好的模版，其次也有点需要审美。但对我自己的博客而言，更想做到<strong>有趣</strong>，而非仅仅好看。而这就有点像是在<strong>收藏</strong><code>JavaScript</code>，并且把它们都摆在这个网站上展示出来。</p><h3><span id="页脚">🦶页脚</span></h3><p>页脚的有个很像命令行的东西</p><p>jesse@keep-alive:~/2021/12/09/Interesting-things/$ mkdir /cool/code</p><p>有两点有意思的地方</p><ol type="1"><li><h4><span id="后面这个命令mkdir-coolcode有类似在打字一样的动画">后面这个命令mkdir /cool/code，有类似在打字一样的动画</span></h4></li></ol><p>这里用了<a href="https://www.cssscript.com/demo/simple-typewriter-effect-pure-javascript-typewriterjs/">这个</a>，直接移植。这里简单记录一下怎么移植。</p><p>​ Step1: 把<code>js</code>文件放到<code>source</code>文件夹里。其实不管是你自己的<code>source</code>文件夹还是主题的都可以，可以想象成他们之后会合并成一个文件夹。</p><p>​ Step2: 在需要这个js的<code>/layout/footer.ejs</code>里加上一行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/typewriter.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是放在页脚这种会出现在很多页面中的地方，一定要用<strong>绝对路径</strong></p><p>​ Step3: 在<code>/layout/footer.ejs</code>中调用即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> pathname = <span class="built_in">window</span>.location.pathname;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;pathname&#x27;</span>).innerText = pathname;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btapp = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btapp&#x27;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> bttypewriter = <span class="keyword">new</span> Typewriter(btapp, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">loop</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    bttypewriter.typeString(<span class="string">&#x27;mkdir /cool/code&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        .pauseFor(<span class="number">800</span>)</span></span><br><span class="line"><span class="javascript">        .deleteChars(<span class="number">4</span>)</span></span><br><span class="line"><span class="javascript">        .typeString(<span class="string">&#x27;life&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        .pauseFor(<span class="number">800</span>)</span></span><br><span class="line"><span class="javascript">        .deleteAll()</span></span><br><span class="line"><span class="javascript">        .typeString(<span class="string">&#x27;have fun&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        .pauseFor(<span class="number">800</span>)</span></span><br><span class="line"><span class="javascript">        .start();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2" type="1"><li><h4><span id="前面这个路径~20211209in也是在网站中当前网页的路径可以跳转到别的页面试试">前面这个路径~/2021/12/09/In…，也是在网站中当前网页的路径（可以跳转到别的页面试试）</span></h4></li></ol><p>这个实现起来很简单，以下是<code>.ejs</code>代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jesse@keep-alive:~<span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;pathname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>$</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> pathname = <span class="built_in">window</span>.location.pathname;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;pathname&#x27;</span>).innerText = pathname;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个博客用的是Hexo的框架，他具体是怎么生成的我还不是很清楚，不过只要把这个添加到你的主题文件夹里的<code>.ejs</code>，就可以咯。</p><h3><span id="️404">❗️404</span></h3><p>你可以尝试一下访问这个网站的<a href="/404">404页面</a>，也会很有意思的。是我之前看了-LKs-的视频，他推荐了个<a href="https://theuselessweb.com">网站</a>，这个网站里面的一个作品</p><h2><span id="接下来要做的事">🔭接下来要做的事</span></h2><p>还有很多要做的东西，比如说<code>robot.txt</code>还没写，虽然说还没写这个就写404页面挺离谱的。还有会慢慢加上更多内容，换个主题什么的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这两天刚刚搭起来这个博客，分享一些在写网站过程中有趣的地方。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;域名&quot;&gt;🔗域名&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;域名是我在&lt;a href=&quot;https://sg.godaddy.com&quot;&gt;Godaddy&lt;/a&gt;上买的，服务器甚至都没买，就是</summary>
      
    
    
    
    
    <category term="theme" scheme="http://keep-a.live/tags/theme/"/>
    
    <category term="css" scheme="http://keep-a.live/tags/css/"/>
    
    <category term="JavaScript" scheme="http://keep-a.live/tags/JavaScript/"/>
    
    <category term="website" scheme="http://keep-a.live/tags/website/"/>
    
  </entry>
  
  <entry>
    <title>Wheatfield with Crows - one of my favorite paintings</title>
    <link href="http://keep-a.live/2021/12/07/Wheatfield-with-Crows-my-favorite-painting/"/>
    <id>http://keep-a.live/2021/12/07/Wheatfield-with-Crows-my-favorite-painting/</id>
    <published>2021-12-07T12:22:20.000Z</published>
    <updated>2021-12-08T02:05:06.809Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong><em>Wheatfield with Crows</em></strong> is a July 1890 painting by <a href="https://en.wikipedia.org/wiki/Vincent_van_Gogh">Vincent van Gogh</a>. It has been cited by several critics as one of his greatest works.</p></blockquote><p>Aesthetically I prefer Van Gogh's last self-portrait. But after seeing <em>Loving Vincent</em>, the storytelling of this painting appealed to me even more. In the play, the sound of Van Gogh's suicidal gunshot startles away crows in the wheat field. It was for the plot. But this being Van Gogh's last painting, it still touches me every time I see it.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Wheatfield with Crows&lt;/em&gt;&lt;/strong&gt; is a July 1890 painting by &lt;a href=&quot;https://en.wikipedia.org/wiki/Vincent_va</summary>
      
    
    
    
    <category term="gallery" scheme="http://keep-a.live/categories/gallery/"/>
    
    
    <category term="painting" scheme="http://keep-a.live/tags/painting/"/>
    
    <category term="Vincent" scheme="http://keep-a.live/tags/Vincent/"/>
    
    <category term="van Gogh" scheme="http://keep-a.live/tags/van-Gogh/"/>
    
  </entry>
  
  <entry>
    <title>Liwenjian Typora theme</title>
    <link href="http://keep-a.live/2021/12/07/Liwenjian-Typora-theme/"/>
    <id>http://keep-a.live/2021/12/07/Liwenjian-Typora-theme/</id>
    <published>2021-12-07T03:09:24.000Z</published>
    <updated>2021-12-12T08:23:37.287Z</updated>
    
    <content type="html"><![CDATA[<p>I wrote a Typora theme. The project has been released to <a href="https://github.com/Li-Jesse-Jiaze/Liwenjian-Typora-Theme">my Github</a>. Feel free to use it.</p><h2><span id="install">🔨Install</span></h2><ol type="1"><li>Download <a href="https://github.com/Li-Jesse-Jiaze/Liwenjian-Typora-Theme/releases/tag/0.1.0">this</a> zip from Github, extract this file, then you can get the <code>lwj-dark.css</code>, <code>lwj-light.css</code> and <code>liwenjian</code> folder.</li><li>Open typora, click <code>Preference</code> → <code>Apperance</code> → <code>Open Theme Folder</code>.</li><li>Put <code>lwj-dark.css</code>, <code>lwj-light.css</code> and <code>liwenjian</code> folder into the open folder.</li><li>Close Typora totally, reopen Typora and select <code>Theme</code> → <code>lwj-light</code> from the menu bar.</li></ol><h2><span id="️notes">⚠️Notes</span></h2><ul><li>Designed and tested on macOS. Not fully tested, but should work for Windows/Linux.</li><li>It is better to install <code>Operator Mono</code> font by yourself first.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I wrote a Typora theme. The project has been released to &lt;a href=&quot;https://github.com/Li-Jesse-Jiaze/Liwenjian-Typora-Theme&quot;&gt;my Github&lt;/a&gt;</summary>
      
    
    
    
    <category term="gallery" scheme="http://keep-a.live/categories/gallery/"/>
    
    
    <category term="theme" scheme="http://keep-a.live/tags/theme/"/>
    
    <category term="css" scheme="http://keep-a.live/tags/css/"/>
    
    <category term="markdown" scheme="http://keep-a.live/tags/markdown/"/>
    
    <category term="Typora" scheme="http://keep-a.live/tags/Typora/"/>
    
    <category term="Projects" scheme="http://keep-a.live/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://keep-a.live/2021/12/07/hello-world/"/>
    <id>http://keep-a.live/2021/12/07/hello-world/</id>
    <published>2021-12-06T16:21:57.657Z</published>
    <updated>2021-12-07T13:06:59.244Z</updated>
    
    <content type="html"><![CDATA[<p>This is my first blog post. For testing.</p><h3><span id="code-test">code test</span></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//Your first C++ code</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is my first blog post. For testing.&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;code-test&quot;&gt;code test&lt;/span&gt;&lt;/h3&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    <category term="gallery" scheme="http://keep-a.live/categories/gallery/"/>
    
    
    <category term="Hello World" scheme="http://keep-a.live/tags/Hello-World/"/>
    
  </entry>
  
</feed>
